{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro2020/1234.mn/ React/burger copy/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { thunk } from \"redux-thunk\";\nimport burgerReducer from \"./redux/reducer/burgerReducer\";\nimport orderReducer from \"./redux/reducer/orderReducer\";\nimport signupReducer from \"./redux/reducer/signupLoginReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loggerMiddlaware = store => {\n  return next => {\n    return action => {\n      console.log(\"MyLoggerMiddleware: Dispatching ==> \", action);\n      console.log(\"MyLoggerMiddleware: State BEFORE : \", store.getState());\n      const result = next(action);\n      console.log(\"MyLoggerMiddleware: State AFTER : \", store.getState());\n      return result;\n    };\n  };\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducers = combineReducers({\n  burgerReducer,\n  orderReducer,\n  signupReducer\n});\nconst middlewares = [loggerMiddlaware, thunk];\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(...middlewares)));\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","map":{"version":3,"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","createStore","applyMiddleware","combineReducers","compose","Provider","thunk","burgerReducer","orderReducer","signupReducer","jsxDEV","_jsxDEV","loggerMiddlaware","store","next","action","console","log","getState","result","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducers","middlewares","render","children","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","unregister"],"sources":["/Users/macbookpro2020/1234.mn/ React/burger copy/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { thunk } from \"redux-thunk\";\n\nimport burgerReducer from \"./redux/reducer/burgerReducer\";\nimport orderReducer from \"./redux/reducer/orderReducer\";\nimport signupReducer from \"./redux/reducer/signupLoginReducer\";\n\nconst loggerMiddlaware = (store) => {\n  return (next) => {\n    return (action) => {\n      console.log(\"MyLoggerMiddleware: Dispatching ==> \", action);\n      console.log(\"MyLoggerMiddleware: State BEFORE : \", store.getState());\n      const result = next(action);\n      console.log(\"MyLoggerMiddleware: State AFTER : \", store.getState());\n      return result;\n    };\n  };\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducers = combineReducers({\n  burgerReducer,\n  orderReducer,\n  signupReducer,\n});\n\nconst middlewares = [loggerMiddlaware, thunk];\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,aAAa;AAC7B,OAAO,KAAKC,aAAa,MAAM,iBAAiB;AAChD,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,WAAW,EAAEC,eAAe,EAAEC,eAAe,EAAEC,OAAO,QAAQ,OAAO;AAC9E,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,KAAK,QAAQ,aAAa;AAEnC,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,aAAa,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,OAAQC,IAAI,IAAK;IACf,OAAQC,MAAM,IAAK;MACjBC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,MAAM,CAAC;MAC3DC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;MACpE,MAAMC,MAAM,GAAGL,IAAI,CAACC,MAAM,CAAC;MAC3BC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;MACnE,OAAOC,MAAM;IACf,CAAC;EACH,CAAC;AACH,CAAC;AAED,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAoC,IAAIlB,OAAO;AAE/E,MAAMmB,QAAQ,GAAGpB,eAAe,CAAC;EAC/BI,aAAa;EACbC,YAAY;EACZC;AACF,CAAC,CAAC;AAEF,MAAMe,WAAW,GAAG,CAACZ,gBAAgB,EAAEN,KAAK,CAAC;AAE7C,MAAMO,KAAK,GAAGZ,WAAW,CACvBsB,QAAQ,EACRH,gBAAgB,CAAClB,eAAe,CAAC,GAAGsB,WAAW,CAAC,CAClD,CAAC;AAED3B,QAAQ,CAAC4B,MAAM,eACbd,OAAA,CAACN,QAAQ;EAACQ,KAAK,EAAEA,KAAM;EAAAa,QAAA,eACrBf,OAAA,CAACX,aAAa;IAAA0B,QAAA,eACZf,OAAA,CAACb,GAAG;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACR,CAAC,EACXC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;;AAED;AACA;AACA;AACAjC,aAAa,CAACkC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}